PROGRAM 1
//1. Parameter passing: passing parameter by value vs by reference, passing array as constant pointer 
#include<iostream>
using namespace std;
void swap(int a,int b)
{
        int c;
        c=a;
        a=b;
        b=c;
        cout<<"After Swapping Value of A="<<a<<"\tB="<<b<<"\n";
}
void swapref (int &num1, int &num2)
{
        int temp;
        temp=num1;
        num1=num2;
        num2=temp;
        cout<<"After Swapping Value of A="<<num1<<"\tB="<<num2<<"\n";
}
void swapvalue (int *x, int *y)
{
 int c;
 c=*x;
 *x=*y;
 *y=c;
}
int main()
{
        int a,b;
        cout<<"Enter Value Of A,B:";
        cin>>a>>b;
        cout<<"Before Swapping value of A="<<a<<"\tB="<<b<<"\n";
        swapvalue(&a,&b);
        cout<<"After swapping:"<<a<<" "<<b<<endl;
        swapref(a,b);
        cout<<"After swapping A="<<a<<"\t"<<"B="<<b<<endl;
        swap(a,b);
        return 0;
}
OUTPUT
Enter Value Of A,B: 20 50
Before Swapping value of A=20   B=50
After swapping:50 20
After Swapping Value of A=20    B=50
After swapping A=20     B=50
After Swapping Value of A=50    B=20

PROGRAM2
OUTPUT

PROGRAM 3
//3. Dynamically allocating space for a pointer depending on input and doing this repeatedly,
//depending on different inputs and finally de-allocating the pointer. 
#include<iostream>
using namespace std;
int main()
{
int *ptr1=NULL;
ptr1=new int;
*ptr1=43;
float *ptr2=new float(52.1);
int *ptr3=new int[20];
cout<<"value of ptr1"<<"\t"<<*ptr1<<endl;
cout<<"value of ptr2"<<"\t"<<*ptr2<<endl;
cout<<"address of ptr1"<<ptr1<<endl;
cout<<"address of ptr2"<<ptr2<<endl;
if(!ptr3)
cout<<"failed to allocate"<<endl;
else
{
for(int i=10;i<15;i++)
ptr3[i]=i+1;
cout<<"values of blocks"<<endl;
for(int i=10;i<15;i++)
cout<<ptr3[i]<<endl;;
}
delete ptr1;
delete ptr2;
delete [] ptr3;
cout<<*ptr1;
return 0;
}
OUTPUT
value of ptr1   43
value of ptr2   52.1
address of ptr10x720d40
address of ptr20x720dc0
values of blocks
11
12
13
14
15

PROGRAM 4
//4. Define class complex with all possible operations: constructor, destructor, copy
//constructor, assignment operator with the data members stored as pointer to integers
#include <iostream>
using namespace std;
class Complex{
    public:
        int *real;
        int *image;
        Complex(int *a,int *b){
        real=a;
        image=b;
            
        }
      //  Complex(const Complex&);
        void display(){
            cout<<*real<<" "<<*image<<endl;
        }
       
         ~Complex(){
             cout<<"Object destroyed\n";
        }
};

void add(Complex c1,Complex c2){
    cout<<*c1.real+*c2.real<<"+"<<*c1.image+*c2.image<<"i"<<endl;
}
void subt(Complex c1,Complex c2){
    cout<<"("<<*c1.real-*c2.real<<")+("<<*c1.image-*c2.image<<")i"<<endl;
}
void mult(Complex c1,Complex c2){
    int a,b,c,d;
    a=*c1.real;
    b=*c2.real;
    c=*c1.image;
    d=*c2.image;
    cout<<"("<<(a*b)-(c*d)<<")+("<<a*d+b*c<<")i"<<endl;
    //(2+3i)(4+5i)
}
void divide(Complex c1,Complex c2){
    int a,b,c,d;
    a=*c1.real;
    b=*c2.real;
    c=*c1.image;
    d=*c2.image;
    float temp=(b*b)-(d*d);
    cout<<"("<<((a*b)-(c*d)/temp)<<")+("<<((a*d+b*c)/temp)<<")i"<<endl;
    //2+3i
    //4+5i
}

int main()
{
    int q1=20,q2=40,q3=50,q4=60;

    Complex p1(&q1,&q2);
    Complex num2(&q3,&q4);
    
    divide(p1,num2);
    
    return 0;
}

OUTPUT

(1002.18)+(-2.90909)i
Object destroyed
Object destroyed
Object destroyed
Object destroyed

PROGRAM 5
//5. Define class vector of integers with all possible operations like constructor, destructor,
//copy constructor and assignment operators 
#include <iostream>

using namespace std;
class Vector
{
  public:
    int len;
    int *arr;
    Vector(){
    	arr=new int;
    	len=0;
    }
    void push(int a){
        *(arr+len)=a;
        len++;
    }
    void size(){
    	cout<<"size of vector is "<<len<<endl;
    }
    void isEmpty(){
    	(len==0)?cout<<"Vector is empty\n":cout<<"Vector is not empty\n";
    }
    void display(){
    	if(arr == NULL){
	    	cout<<"Empty vector\n";
	    	return;
	    }
    	for(int i=0;i<len;i++){
	    	cout<<arr[i]<<endl;
	    }
    }
    void clear(){
    	delete arr;
    	len=0;
    }
    void front(){
    	cout<<"first Element is "<<*(arr)<<endl;
    }
    void back(){
    	cout<<"first Element is "<<*(arr+(len-1))<<endl;
    }
    ~Vector(){
    	cout<<"Object destroyed\n";
    }
};
int main()
{
    Vector v,v2;
    v.push(10);
    v.push(20);
    v.push(30);
    v.push(40);
    v.front();
    v.back();
    return 0;
}
OUTPUT
first Element is 10
first Element is 40
Object destroyed
Object destroyed

PROGRAM 6
OUTPUT
PROGRAM 7
//8. Define class stack, queue, linked-list, array, set using some data-type (int) with data
//members kept as private and functions kept in both protected and public sections.

#include<iostream>
using namespace std;
class Stack{
	private:
		int top;
		int *arr;
	public:
		Stack(){
			top=0;
			arr = new int;
		}
		void push(int x){
			*(arr+top)=x;
		}
		int pop(){
			return *(arr+(top--));
		}
		int seek(){
			return *(arr+top);
		}
		int size(){
			return top;
		}
		int isEmpty(){
			return top==0;
		}
};
class Queue{
	int frnt;
	int rear;
	int *arr;
	public:
		Queue(){
			frnt=-1;
			rear=-1;
			arr= new int;
		}
		void enque(int x){
			if(frnt == -1) frnt=0;
			*(arr+(++rear))=x;
		}
		int deque(){
			return *(arr+(frnt++));
		}
		int isEmpty(){
			return frnt == -1 || frnt > rear;
		}
		int size(){
			return rear+1;
		}
		int get_front(){
			return *(arr+frnt);
		}
};
class Node{
	public:
	int data;
	Node *next;
};
class L_list{
	private:
		Node *head;
	public:
	L_list(){
		head = NULL;
	}
	void insert_begin(int x){
		if(head == NULL){
			head = new Node;
			head->data= x;
			head->next=NULL;
		}
		else{
			Node *node = new Node;
			node->data= x;
			node->next= head;
			head=node;
		}
	}
	void insert_end(int x){
		Node *node = new Node;
			node->data= x;
			node->next=NULL;
		Node *temp = head;
		while(temp->next != NULL){
			temp=temp->next;
		}
		temp->next=node;
	}
	void insert_pos(int p,int x){
		Node *node = new Node;
		node->data= x;
		node->next=NULL;
		
		Node *temp = head;
		for(int i=1;i<p-1;i++){
			temp=temp->next;
			
		}
	}
	void delete_begin(){
		Node *node = head;
		head=head->next;
		delete node;
	}
	void delete_end(){
		Node *temp = head,*prev;
		while(temp->next != NULL){
			prev = temp;
			temp=temp->next;
		}
		prev->next = NULL;
		delete temp;
	}
	int search(int x){
		Node *temp = head;
		while(temp->next != NULL){
			if(temp->data == x){
				return 1;
			}
			temp=temp->next;
		}
		return 0;
	}
	void display(){
		Node *temp = head;
		while(temp != NULL){
			cout<<temp->data<<endl;
			temp=temp->next;
		}
	}
};

class Set{
	int size;
	int *arr;
	public:
	Set(){
		size = 0;
	}
		void insert(int x){
			*(arr+size)=x;
			size++;
		}
		void Sort(){
			for(int i = 0;i<size;i++){
				for(int j=i+1;j<=size;j++){
					if(*(arr+j) < *(arr+i)){
						int temp = *(arr+j);
						*(arr+j) = *(arr+i);
						*(arr+i)= temp;
					}
				}
			}
		}
		void remove(int x){
			int i = 0;
			while(*(arr+i) != x){
				i++;
			}
			size--;
			for(int j=i;j<size;j++){
				*(arr+j)=*(arr+j+1);
			}
		}
		void display(){
			for(int i = 0;i<size;i++){
					cout<<*(arr+i)<<endl;
			}
		}
};

int main(){
	/*Stack s1;
	s1.push(1);
	s1.push(2);
	s1.push(3);
	cout<<s1.pop()<<endl;
	s1.push(4);
	cout<<s1.seek()<<endl;
	
	Queue q1;
	q1.enque(2);
	q1.enque(3);
	q1.enque(4);
	cout<<q1.get_front()<<endl;
	cout<<q1.deque()<<endl;
	cout<<q1.get_front()<<endl;
	
	L_list l1;
	l1.insert_begin(1);
	l1.insert_begin(2);
	l1.insert_begin(3);
	l1.display(); 
	
	Set s1;
	s1.insert(2);
	s1.insert(3);
	s1.insert(1);
	s1.Sort();
	s1.remove(2);
	s1.display();*/
	
	return 0;
}
OUTPUT
Stack
30
4
Queue
20
20
30
L_list
30
20
10
Set
10
30

PROGRAM 9

//9. Define class complex with all possible operators: constructor, destructor, copy
//constructor, assignment operator and operators >, <, >=, <=, ==, ++ (pre and post), +, +=,
( ), with the data members stored as pointer to integers.
//9. Define class complex with all possible operators: constructor, destructor, copy
//constructor, assignment operator and operators >, <, >=, <=, ==, ++ (pre and post), +, +=,
//( ), with the data members stored as pointer to integers.
#include<iostream>
#include<cmath>
using namespace std;
class complex{
	public:
		int real;
		int image;
		complex(){
			real = 0;
			image = 0;
		}
		complex(int r,int i){
			real = r;
			image=i;
		}
		int operator<(complex c){
			float z1=sqrt(real*real+image*image);
			float z2=sqrt(c.real*c.real+c.image*c.image); 
			return z1<z2;
		}
		int operator>(complex c){
			float z1=sqrt(real*real+image*image);
			float z2=sqrt(c.real*c.real+c.image*c.image); 
			return z1>z2;
		}
		int operator>=(complex c){
			float z1=sqrt(real*real+image*image);
			float z2=sqrt(c.real*c.real+c.image*c.image); 
			return z1>=z2;
		}
		int operator<=(complex c){
			float z1=sqrt(real*real+image*image);
			float z2=sqrt(c.real*c.real+c.image*c.image); 
			return z1<=z2;
		}
		int operator==(complex c){
			return (real == c.real) && (image == c.image);
		}
		void operator++(){
				real++;
				image++;
		}
		void operator++(int){
				++real;
				++image;
		}
		complex operator+(complex c){
			complex ans;
			ans.real= real+c.real;
			ans.image=image+c.image;
			return ans;
		}
		void operator=(complex c){
			real=c.real;
			image=c.image;
		}
		void display(){
			cout<<real<<"+"<<image<<"i"<<endl;
		}
		
};
int main(){
	complex c1(5,6);
	complex c2=c1;
	complex c3=c1+c2;
	c3.display();
	c3++;
	c3.display();
	if(c1<c2){
		cout<<"equal\n";
	}
	else{
		cout<<"not equal\n";
	};
	return 0;
}

OUTPUT
10+12i
11+13i
not equal

PROGRAM 10
#include<iostream>
using namespace std;
class Vector
{
  public:
    int len;
    int *arr;
    Vector(){
    	arr=new int;
    	len=0;
    }
    void push(int a){
        *(arr+(len++))=a;
    }
    void size(){
    	cout<<"size of vector is "<<len<<endl;
    }
    void isEmpty(){
    	(len==0)?cout<<"Vector is empty\n":cout<<"Vector is not empty\n";
    }
    void display(){
    	if(arr == NULL){
	    	cout<<"Empty vector\n";
	    	return;
	    }
    	for(int i=0;i<len;i++){
	    	cout<<arr[i]<<endl;
	    }
    }
    int operator()(int i){
    	return arr[i];
    }
    void operator+(Vector v){
    	if(len != v.len){
	    	cout<<"Only vectors of same size can be added!";
	    	return;
	    }
	    for(int i=0;i<len;i++){
    		cout<<arr[i]+v(i)<<endl;
    	}
    }
    int operator==(Vector v){
    	if(len != v.len){
	    	cout<<"Only vectors of same size can be compared!";
	    	return -1;
	    }
	    for(int i=0;i<len;i++){
    		if(arr[i] != v(i)){
		    	return 0;
		    }
    	}
    	return 1;
    }
    void operator++(int){
	    for(int i=0;i<len;i++){
    		cout<<arr[i]+1<<endl;
    	}
    }
    void operator++(){
	    for(int i=0;i<len;i++){
    		cout<<arr[i]+1<<endl;
    	}
    }
    void operator+=(int a){
	    for(int i=0;i<len;i++){
    		cout<<arr[i]+a<<endl;
    	}
    }
    int operator<(Vector v){
    	if(len != v.len){
	    	cout<<"Only vectors of same size can be compared!";
	    	return -1;
	    }
	    for(int i=0;i<len;i++){
    		if(arr[i]>=v(i)){
		    	return 0;
		    }
    	}
    	return 1;
	}
	int operator>(Vector v){
    	if(len != v.len){
	    	cout<<"Only vectors of same size can be compared!";
	    	return -1;
	    }
	    for(int i=0;i<len;i++){
    		if(arr[i]<= v(i)){
		    	return 0;
		    }
    	}
    	return 1;
	}
	int operator>=(Vector v){
    	if(len != v.len){
	    	cout<<"Only vectors of same size can be compared!";
	    	return -1;
	    }
	    for(int i=0;i<len;i++){
    		if(arr[i]< v(i)){
		    	return 0;
		    }
    	}
    	return 1;
	}
	int operator<=(Vector v){
    	if(len != v.len){
	    	cout<<"Only vectors of same size can be compared!";
	    	return -1;
	    }
	    for(int i=0;i<len;i++){
    		if(arr[i]> v(i)){
		    	return 0;
		    }
    	}
    	return 1;
	}
    ~Vector(){
    	cout<<"Object destroyed\n";
    }
};
int main(){
	Vector v;
	v.push(10);
	v.push(20);
	v.push(30);
	Vector v2=v;
	cout<<(v==v2);
	return 0;
}
OUTPUT
1Object destroyed
Object destroyed
Object destroyed

PROGRAM 11
#include<iostream>
#include<cmath>
using namespace std;
class complex{
	public:
		int real;
		int image;
		complex(){
			real = 0;
			image = 0;
		}
		complex(int r,int i){
			real = r;
			image=i;
		}
		int operator<(complex c){
			float z1=sqrt(real*real+image*image);
			float z2=sqrt(c.real*c.real+c.image*c.image); 
			return z1<z2;
		}
		int operator>(complex c){
			float z1=sqrt(real*real+image*image);
			float z2=sqrt(c.real*c.real+c.image*c.image); 
			return z1>z2;
		}
		int operator>=(complex c){
			float z1=sqrt(real*real+image*image);
			float z2=sqrt(c.real*c.real+c.image*c.image); 
			return z1>=z2;
		}
		int operator<=(complex c){
			float z1=sqrt(real*real+image*image);
			float z2=sqrt(c.real*c.real+c.image*c.image); 
			return z1<=z2;
		}
		int operator==(complex c){
			return (real == c.real) && (image == c.image);
		}
		void operator++(){
				real++;
				image++;
		}
		void operator++(int){
				++real;
				++image;
		}
		complex operator+(complex c){
			complex ans;
			ans.real= real+c.real;
			ans.image=image+c.image;
			return ans;
		}
		void operator=(complex c){
			real=c.real;
			image=c.image;
		}
		void display(){
			cout<<real<<"+"<<image<<"i"<<endl;
		}
		
};
int main(){
	complex c1(5,6);
	complex c2=c1;
	complex c3=c1+c2;
	c3.display();
	c3++;
	c3.display();
	if(c1<c2){
		cout<<"equal\n";
	}
	else{
		cout<<"not equal\n";
	};
	
	return 0;
}
OUTPUT
10+12i
11+13i
not equal

PROGRAM 12
OUTPUT

